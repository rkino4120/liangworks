---
import Layout from '../../layouts/Layout.astro';
// 個別記事取得関数を使用してパフォーマンス改善
import { getBlogPosts, getBlogPost, type BlogPost } from '../../lib/microcms'; 
import type { GetStaticPaths, GetStaticPathsResult } from 'astro';

export const getStaticPaths: GetStaticPaths = async (): Promise<GetStaticPathsResult> => {
  // パフォーマンス向上：必要最小限のフィールドのみ取得
  const response = await getBlogPosts({
    fields: 'id' // パスの生成には id のみで十分
  }); 
  
  if (!response || !response.contents) {
    console.warn('microCMSから記事データを取得できませんでした。');
    return [];
  }
  
  const posts = response.contents;

  return posts.map(post => {
    return {
      params: { id: post.id },
      // 詳細データは実際のページで個別取得するため、props は空に
      props: { postId: post.id }
    };
  });
};

// 個別記事を取得してパフォーマンス改善
const { postId } = Astro.props as { postId: string };
let post: BlogPost | null = null;
let error: string | null = null;

try {
  // 個別記事取得でより効率的にデータを取得
  post = await getBlogPost(postId);
} catch (e) {
  console.error('記事の取得に失敗:', e);
  error = '記事の読み込みに失敗しました。';
}

function formatDate(dateString: string): string {
  const date: Date = new Date(dateString);
  return date.toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function isValidPost(p: BlogPost | null): p is BlogPost {
  return p !== null && typeof p.title === 'string';
}

// SEO用のメタ情報を生成
const pageTitle = post?.title ? `${post.title} - Liang Works Blog` : 'ブログ記事 - Liang Works';
const pageDescription = post?.content ? 
  post.content.replace(/<[^>]*>/g, '').substring(0, 160) + '...' : 
  'Liang WorksのWebGL技術ブログ記事です。';
const pageImage = post?.eyecatch?.url || '/images/profile.jpg';
const canonicalUrl = `${Astro.site}blog/${postId}`;
---

<Layout title={pageTitle}>
  <!-- SEO最適化のためのメタタグ -->
  <Fragment slot="head">
    <meta name="description" content={pageDescription} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:image" content={pageImage} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:type" content="article" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={pageImage} />
    <link rel="canonical" href={canonicalUrl} />
    {post?.publishedAt && <meta property="article:published_time" content={post.publishedAt} />}
    {post?.category && <meta property="article:section" content={post.category.name} />}
    {post?.tags && post.tags.map(tag => <meta property="article:tag" content={tag.name} />)}
    
    <!-- パフォーマンス最適化：画像プリロード -->
    {post?.eyecatch?.url && (
      <link rel="preload" as="image" href={post.eyecatch.url} />
    )}
  </Fragment>
  <main class="max-w-4xl mx-auto px-4 py-8">
    {error ? (
      <div class="text-center py-16 px-8">
        <h1 class="text-red-500 text-3xl font-bold mb-4">エラー</h1>
        <p class="text-gray-600 mb-6">{error}</p>
        <a href="/blog" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200">
          ブログ一覧に戻る
        </a>
      </div>
    ) : isValidPost(post) ? (
      <article class="bg-white rounded-xl shadow-lg overflow-hidden">
        <header class="p-8 border-b border-gray-200">
          {post.eyecatch?.url && (
            <div class="mb-8">
              <img 
                src={post.eyecatch.url} 
                alt={post.title}
                width={post.eyecatch.width || 800}
                height={post.eyecatch.height || 400}
                loading="eager"
                decoding="sync"
                class="w-full h-80 object-cover rounded-lg"
                style="aspect-ratio: 2/1;"
              />
            </div>
          )}
          
          <h1 class="text-4xl md:text-5xl font-bold leading-tight mb-6 text-gray-900">
            {post.title}
          </h1>
          
          <div class="flex flex-col md:flex-row md:items-center gap-4 mb-6 text-gray-600">
            <time 
              datetime={post.publishedAt || post.createdAt}
              class="text-sm"
            >
              {formatDate(post.publishedAt || post.createdAt)}
            </time>
            
            {post.category && (
              <span class="bg-gray-100 text-gray-700 px-4 py-2 rounded-full text-sm font-medium">
                {post.category.name}
              </span>
            )}
          </div>
          
          {post.tags && post.tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {post.tags.map((tag) => (
                <span class="bg-teal-50 text-teal-700 px-3 py-1 rounded text-sm">
                  {tag.name}
                </span>
              ))}
            </div>
          )}
        </header>
        
        <div class="p-8">
          <div class="article-content" set:html={post.content}></div>
        </div>
        
        <footer class="p-8 border-t border-gray-200">
          <a 
            href="/blog" 
            class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200"
          >
            ← ブログ一覧に戻る
          </a>
        </footer>
      </article>
    ) : null}
  </main>
</Layout>

<style is:inline>
  /* クリティカルCSS：初期表示に必要な最小限のスタイル */
  .max-w-4xl {
    max-width: 56rem;
  }
  .mx-auto {
    margin-left: auto;
    margin-right: auto;
  }
  .px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  .py-8 {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  .bg-white {
    background-color: white;
  }
  .rounded-xl {
    border-radius: 0.75rem;
  }
  .shadow-lg {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .text-center {
    text-align: center;
  }
  .text-4xl {
    font-size: 2.25rem;
    line-height: 2.5rem;
  }
  .font-bold {
    font-weight: 700;
  }
  .mb-6 {
    margin-bottom: 1.5rem;
  }
  .text-gray-900 {
    color: rgb(17, 24, 39);
  }
</style>

<style>
  /* microCMS記事コンテンツ用のカスタムスタイル */
  .article-content :global(h1),
  .article-content :global(h2),
  .article-content :global(h3),
  .article-content :global(h4),
  .article-content :global(h5),
  .article-content :global(h6) {
    color: #1f2937;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .article-content :global(h1) {
    font-size: 2rem;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .article-content :global(h2) {
    font-size: 1.75rem;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.25rem;
  }

  .article-content :global(h3) {
    font-size: 1.5rem;
  }

  .article-content :global(h4) {
    font-size: 1.25rem;
  }

  .article-content :global(p) {
    margin-bottom: 1.5rem;
    line-height: 1.7;
    color: #374151;
  }

  .article-content :global(ul),
  .article-content :global(ol) {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }

  .article-content :global(ul) {
    list-style-type: disc;
  }

  .article-content :global(ol) {
    list-style-type: decimal;
  }

  .article-content :global(li) {
    margin-bottom: 0.5rem;
    line-height: 1.6;
    color: #374151;
  }

  .article-content :global(ul li::marker) {
    color: #6b7280;
  }

  .article-content :global(ol li::marker) {
    color: #6b7280;
  }

  .article-content :global(strong) {
    font-weight: 700;
    color: #1f2937;
  }

  .article-content :global(em) {
    font-style: italic;
    color: #4b5563;
  }

  .article-content :global(a) {
    color: #2563eb;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: all 0.2s ease;
  }

  .article-content :global(a:hover) {
    color: #1d4ed8;
    border-bottom-color: #2563eb;
  }

  .article-content :global(blockquote) {
    border-left: 4px solid #2563eb;
    background-color: #f8fafc;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: #4b5563;
  }

  .article-content :global(code) {
    background-color: #f1f5f9;
    color: #1e293b;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  }

  .article-content :global(pre) {
    background-color: #1e293b;
    color: #e2e8f0;
    padding: 1.5rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    font-size: 0.875rem;
  }

  .article-content :global(pre code) {
    background-color: transparent;
    color: inherit;
    padding: 0;
  }

  .article-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1.5rem 0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    /* パフォーマンス最適化：画像の遅延読み込み */
    loading: lazy;
    decoding: async;
  }

  .article-content :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
  }

  .article-content :global(th),
  .article-content :global(td) {
    border: 1px solid #d1d5db;
    padding: 0.75rem;
    text-align: left;
  }

  .article-content :global(th) {
    background-color: #f9fafb;
    font-weight: 600;
    color: #1f2937;
  }

  .article-content :global(td) {
    color: #374151;
  }

  .article-content :global(hr) {
    border: none;
    border-top: 1px solid #e5e7eb;
    margin: 2rem 0;
  }

  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .article-content :global(h1) {
      font-size: 1.75rem;
    }

    .article-content :global(h2) {
      font-size: 1.5rem;
    }

    .article-content :global(h3) {
      font-size: 1.25rem;
    }

    .article-content :global(ul),
    .article-content :global(ol) {
      padding-left: 1.5rem;
    }

    .article-content :global(pre) {
      padding: 1rem;
      font-size: 0.8rem;
    }
  }
</style>


